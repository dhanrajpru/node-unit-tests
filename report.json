[{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/app/i18n.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":13,"column":1,"nodeType":"Identifier","endLine":13,"endColumn":7}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nvar mapping = {\n    'hello': {\n        'en': 'hello',\n        'es': 'hola'\n    },\n    'beer': {\n        'en': 'beer',\n        'es': 'cervesa'\n    }\n};\n\nmodule.exports = function translate(phrase, lang) {\n    var phraseMap = mapping[phrase];\n    \n    if (!phraseMap) {\n        return phrase;\n    }\n    \n    return phraseMap[lang] || phrase;\n};\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/app/server.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":12,"nodeType":"Identifier","endLine":1,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":11,"nodeType":"Identifier","endLine":2,"endColumn":18},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":18,"column":5,"nodeType":"Identifier","endLine":18,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":18,"column":22,"nodeType":"Identifier","endLine":18,"endColumn":28},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":21,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":26,"column":5,"nodeType":"Identifier","endLine":26,"endColumn":11}],"errorCount":6,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"var http = require( 'http' ),\n    url = require( 'url' );\n\nvar server = http.createServer( function requestHandler( req, res ) {\n    if ( url.parse(req.url).pathname !== '/' ) {\n        res.writeHead( 404, 'Not Found' );\n        res.end( 'Not Found' );\n        return;\n    }\n    \n    res.writeHead( 200, {\n        'Content-Type': 'text/html'\n    } );\n    res.end( '<h1>Hello World!</h1>' );\n} );\n\n\nif (require.main === module) {\n    \n    server.listen( 3000, function() {\n        console.log( 'The server is up!' );\n    } );\n    \n} else {\n    \n    module.exports = server;\n    \n}"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/app/team.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":2,"column":1,"nodeType":"Identifier","endLine":2,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":24,"nodeType":"Identifier","endLine":6,"endColumn":31}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nmodule.exports = function teamModule( options ) {\n    options = options || {};\n    \n    if (!options.User) {\n        options.User = require('./lib/User');\n    }\n    \n    return {\n        findMembers: function(team, cb) {\n        \n            options.User.find(\n                { where: { team: team } },\n                function(err, results) {\n                    if (err) { return cb(err); }\n                    \n                    cb(null, results);\n                }\n            );\n            \n        }\n    };\n};\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/app/text.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":10,"nodeType":"Identifier","endLine":2,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":12,"nodeType":"Identifier","endLine":3,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","endLine":5,"endColumn":7}],"errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nvar fs = require('fs');\nvar i18n = require('./i18n');\n\nmodule.exports = function translateText(filename, lang, cb) {\n    \n    fs.readFile( filename, function(err, data) {\n        var text, translated = [];\n        \n        if (err) { return cb( err ); }\n        \n        try {\n            \n            text = JSON.parse( data.toString() );\n            text.forEach( function(phrase) {\n                translated.push( i18n(phrase, lang) );\n            } );\n            \n            cb( null, translated );\n            \n        } catch(e) {\n            return cb( e );\n        }\n    } );\n    \n};\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/coverage/lcov-report/block-navigation.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/coverage/lcov-report/prettify.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/coverage/lcov-report/sorter.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/test/test-i18n.js","messages":[{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":3,"column":5,"nodeType":"VariableDeclarator","endLine":3,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":14,"nodeType":"Identifier","endLine":3,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":12,"nodeType":"Identifier","endLine":5,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":8,"column":1,"nodeType":"Identifier","endLine":8,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":9,"column":5,"nodeType":"Identifier","endLine":9,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":18,"column":5,"nodeType":"Identifier","endLine":18,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":26,"column":5,"nodeType":"Identifier","endLine":26,"endColumn":7}],"errorCount":7,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n\nvar assert = require('chai').assert;\n\nvar i18n = require('../app/i18n');\n\n\ndescribe('i18n', function() {\n    it('should return correct translation if available', function() {\n        \n        assert( i18n('hello'), 'hello' );\n        assert( i18n('hello', 'en'), 'hello' );\n        assert( i18n('hello', 'es'), 'hola' );\n        assert( i18n('beer', 'es'), 'cervesa' );\n        \n    });\n    \n    it('should return the input on a missing phrase', function() {\n        \n        assert.equal( i18n('foobar'), 'foobar' );\n        assert.equal( i18n('foobar', 'es'), 'foobar' );\n        assert.equal( i18n('beer', 'jp'), 'beer' );\n        \n    });\n    \n    it('should handle mixed case', function() {\n        \n        assert.equal(i18n('Beer'), 'cervesa');\n        \n    });\n});\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/test/test-server.js","messages":[{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":2,"column":5,"nodeType":"VariableDeclarator","endLine":2,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":14,"nodeType":"Identifier","endLine":2,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":18,"nodeType":"Identifier","endLine":3,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":14,"nodeType":"Identifier","endLine":5,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":8,"column":1,"nodeType":"Identifier","endLine":8,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":10,"column":5,"nodeType":"Identifier","endLine":10,"endColumn":15},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":13,"column":11,"nodeType":"ExpressionStatement","fix":{"range":[268,268],"text":";"}},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":16,"column":5,"nodeType":"Identifier","endLine":16,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":23,"column":5,"nodeType":"Identifier","endLine":23,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":35,"column":5,"nodeType":"Identifier","endLine":35,"endColumn":7}],"errorCount":10,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\nvar assert = require('chai').assert;\nvar superagent = require('superagent');\n\nvar server = require('../app/server');\n\n\ndescribe('server', function() {\n    \n    beforeEach(function( done ) {\n        server.listen(4000, function(err) {\n            done(err);\n        })\n    });\n    \n    afterEach(function( done ) {\n        server.close(function(err) {\n            done(err);\n        });\n    });\n    \n    \n    it('should return Hello World at /', function( done ) {\n        \n        superagent.get('http://localhost:4000/').end(function(err, res) {\n            if (err) { return done(err); }\n            \n            assert.equal(res.status, 200);\n            assert.equal(res.text, '<h1>Hello World!</h1>');\n            done();\n        });\n        \n    });\n    \n    it('should return a 404 at /foo', function( done ) {\n        \n        superagent.get('http://localhost:4000/foo').end(function(err, res) {\n            if (err) {\n                assert.equal(err.message, 'Not Found');\n                assert.equal(res.status, 404);\n                assert.equal(res.text, 'Not Found');\n                return done();\n            }\n            \n            done(new Error('Request to /foo should have failed'));\n        });\n        \n    });\n});\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/test/test-team.js","messages":[{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":3,"column":5,"nodeType":"VariableDeclarator","endLine":3,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":14,"nodeType":"Identifier","endLine":3,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":5,"column":1,"nodeType":"Identifier","endLine":5,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":8,"column":5,"nodeType":"Identifier","endLine":8,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":9,"column":16,"nodeType":"Identifier","endLine":9,"endColumn":23},{"ruleId":"no-shadow","severity":2,"message":"'team' is already declared in the upper scope.","line":11,"column":32,"nodeType":"Identifier","endLine":11,"endColumn":36},{"ruleId":"array-bracket-spacing","severity":2,"message":"There should be no space after '['.","line":12,"column":30,"nodeType":"ArrayExpression","messageId":"unexpectedSpaceAfter","fix":{"range":[257,258],"text":""}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":12,"column":43,"nodeType":null,"messageId":"missingLineBreak","endLine":12,"endColumn":44,"fix":{"range":[269,270],"text":"\n"}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":12,"column":53,"nodeType":null,"messageId":"missingLineBreak","endLine":12,"endColumn":54,"fix":{"range":[279,280],"text":"\n"}},{"ruleId":"array-bracket-spacing","severity":2,"message":"There should be no space before ']'.","line":12,"column":62,"nodeType":"ArrayExpression","messageId":"unexpectedSpaceBefore","fix":{"range":[287,288],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":18,"column":5,"nodeType":"Identifier","endLine":18,"endColumn":7},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":25,"column":49,"nodeType":null,"messageId":"missingLineBreak","endLine":25,"endColumn":50,"fix":{"range":[648,649],"text":"\n"}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":25,"column":59,"nodeType":null,"messageId":"missingLineBreak","endLine":25,"endColumn":60,"fix":{"range":[658,659],"text":"\n"}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before ')'.","line":25,"column":70,"nodeType":"Punctuator","fix":{"range":[667,669],"text":" "}}],"errorCount":14,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"\n\nvar assert = require('chai').assert;\n\ndescribe('team module', function() {\n    var team;\n    \n    beforeEach(function() {\n        team = require('../app/team')({\n            User: {\n                find: function(team, cb) {\n                    cb(null, [ 'Superman', 'Batman', 'Flash' ]);\n                }\n            }\n        });\n    });\n    \n    it('should return members from mock', function( done ) {\n        \n        team.findMembers( 'justice-league', function(err, data) {\n            \n            if (err) { return done( err ); }\n            \n            assert.equal( data.length, 3 );\n            assert.deepEqual( data, ['Superman', 'Batman', 'Flash']  );\n            \n            done();\n            \n        } );\n        \n    });\n});\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/test/test-text-mock.js","messages":[{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":2,"column":5,"nodeType":"VariableDeclarator","endLine":2,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":14,"nodeType":"Identifier","endLine":2,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":5,"column":1,"nodeType":"Identifier","endLine":5,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":7,"column":5,"nodeType":"Identifier","endLine":7,"endColumn":12},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":9,"column":5,"nodeType":"VariableDeclaration","endLine":9,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'beforeEach' is not defined.","line":11,"column":5,"nodeType":"Identifier","endLine":11,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":12,"column":24,"nodeType":"Identifier","endLine":12,"endColumn":31},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space after '['.","line":12,"column":37,"nodeType":"MemberExpression","messageId":"unexpectedSpaceAfter","fix":{"range":[217,218],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":12,"column":39,"nodeType":"Identifier","endLine":12,"endColumn":46},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space before ']'.","line":12,"column":70,"nodeType":"MemberExpression","messageId":"unexpectedSpaceBefore","fix":{"range":[248,249],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":14,"column":9,"nodeType":"Identifier","endLine":14,"endColumn":16},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space after '['.","line":14,"column":22,"nodeType":"MemberExpression","messageId":"unexpectedSpaceAfter","fix":{"range":[291,292],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":14,"column":24,"nodeType":"Identifier","endLine":14,"endColumn":31},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space before ']'.","line":14,"column":55,"nodeType":"MemberExpression","messageId":"unexpectedSpaceBefore","fix":{"range":[322,323],"text":""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":15,"column":25,"nodeType":"ReturnStatement","fix":{"range":[372,372],"text":";"}},{"ruleId":"no-undef","severity":2,"message":"'afterEach' is not defined.","line":19,"column":5,"nodeType":"Identifier","endLine":19,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":21,"column":9,"nodeType":"Identifier","endLine":21,"endColumn":16},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space after '['.","line":21,"column":22,"nodeType":"MemberExpression","messageId":"unexpectedSpaceAfter","fix":{"range":[451,452],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":21,"column":24,"nodeType":"Identifier","endLine":21,"endColumn":31},{"ruleId":"computed-property-spacing","severity":2,"message":"There should be no space before ']'.","line":21,"column":55,"nodeType":"MemberExpression","messageId":"unexpectedSpaceBefore","fix":{"range":[482,483],"text":""}},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":26,"column":5,"nodeType":"Identifier","endLine":26,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":28,"column":25,"nodeType":"Identifier","endLine":28,"endColumn":32},{"ruleId":"no-path-concat","severity":2,"message":"Use path.join() or path.resolve() instead of + to create paths.","line":30,"column":20,"nodeType":"BinaryExpression","endLine":30,"endColumn":47},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":30,"column":20,"nodeType":"BinaryExpression","endLine":30,"endColumn":47,"fix":{"range":[697,724],"text":"`${__dirname  }/phrases.json`"}},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":30,"column":20,"nodeType":"Identifier","endLine":30,"endColumn":29},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":35,"column":44,"nodeType":null,"messageId":"missingLineBreak","endLine":35,"endColumn":45,"fix":{"range":[912,913],"text":"\n"}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":35,"column":51,"nodeType":null,"messageId":"missingLineBreak","endLine":35,"endColumn":52,"fix":{"range":[919,920],"text":"\n"}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before ')'.","line":35,"column":60,"nodeType":"Punctuator","fix":{"range":[926,928],"text":" "}}],"errorCount":28,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":"\nvar assert = require('chai').assert;\n\n\ndescribe('text module with mock', function() {\n    \n    require('../app/i18n');\n    \n    var i18nOriginal;\n    \n    beforeEach(function() {\n        i18nOriginal = require.cache[ require.resolve('../app/i18n') ].exports;\n        \n        require.cache[ require.resolve('../app/i18n') ].exports = function() {\n            return 'foo'\n        };\n    });\n\n    afterEach(function() {\n        \n        require.cache[ require.resolve('../app/i18n') ].exports = i18nOriginal;\n        \n    });\n    \n    \n    it('should return correct translations from a file', function( done ) {\n        \n        var translate = require('../app/text');\n        \n        translate( __dirname + '/phrases.json', 'es', function(err, data) {\n            \n            if (err) { return done( err ); }\n            \n            assert.equal( data.length, 3 );\n            assert.deepEqual( data, ['foo', 'foo', 'foo']  );\n            \n            done();\n            \n        } );\n        \n    });\n});\n"},{"filePath":"/Users/dhanrajkumar/nodetest/node-unit-tests/test/test-text.js","messages":[{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":3,"column":5,"nodeType":"VariableDeclarator","endLine":3,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":14,"nodeType":"Identifier","endLine":3,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":17,"nodeType":"Identifier","endLine":5,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'describe' is not defined.","line":8,"column":1,"nodeType":"Identifier","endLine":8,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'it' is not defined.","line":9,"column":5,"nodeType":"Identifier","endLine":9,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":11,"column":20,"nodeType":"Identifier","endLine":11,"endColumn":29},{"ruleId":"no-path-concat","severity":2,"message":"Use path.join() or path.resolve() instead of + to create paths.","line":11,"column":20,"nodeType":"BinaryExpression","endLine":11,"endColumn":47},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":11,"column":20,"nodeType":"BinaryExpression","endLine":11,"endColumn":47,"fix":{"range":[223,250],"text":"`${__dirname  }/phrases.json`"}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":16,"column":45,"nodeType":null,"messageId":"missingLineBreak","endLine":16,"endColumn":46,"fix":{"range":[439,440],"text":"\n"}},{"ruleId":"array-element-newline","severity":2,"message":"There should be a linebreak after this element.","line":16,"column":56,"nodeType":null,"messageId":"missingLineBreak","endLine":16,"endColumn":57,"fix":{"range":[450,451],"text":"\n"}},{"ruleId":"no-multi-spaces","severity":2,"message":"Multiple spaces found before ')'.","line":16,"column":73,"nodeType":"Punctuator","fix":{"range":[465,467],"text":" "}}],"errorCount":11,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"\n\nvar assert = require('chai').assert;\n\nvar translate = require('../app/text');\n\n\ndescribe('text module', function() {\n    it('should return correct translations from a file', function( done ) {\n        \n        translate( __dirname + '/phrases.json', 'es', function(err, data) {\n            \n            if (err) { return done( err ); }\n            \n            assert.equal( data.length, 3 );\n            assert.deepEqual( data, ['hola', 'cervesa', 'I like beer']  );\n            \n            done();\n            \n        } );\n        \n    });\n});\n"}]